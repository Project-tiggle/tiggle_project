<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">
<!-- namespace (이름공간) == 패키지와 같음 : 매퍼 영역에 이름을 붙여준 것으로 이해하면 됌 -->

	<!-- select 조회한 결과 매핑 처리하는 용도의 엘리먼트임 결과매핑 : 
		 select 한 행의 컬럼값을 한개씩 dto 객체의 필드에 옮겨 저장하는 것 
		 property 는 클래스의 필드명, column 은 데이터베이스 테이블의 컬럼명을 기술하면 됨 -->

	<!-- tiggle member-mapper.xml ************************************************** -->
	<resultMap type="Member" id="resultMember">
		<result property="uuid" column="UUID" />
		<result property="id" column="ID" />
		<result property="pwd" column="PWD" />
		<result property="name" column="NAME" />
		<result property="phone" column="PHONE" />
		<result property="email" column="EMAIL" />
		<result property="nickname" column="NICKNAME" />
		<result property="address" column="ADDRESS" />
		<result property="gender" column="GENDER" />
		<result property="signtype" column="SIGNTYPE" />
		<result property="marketingYN" column="MARKETING_YN" />
		<result property="orgName" column="ORG_NAME" />
		<result property="orgTel" column="ORG_TEL" />
		<result property="orgEmail" column="ORG_EMAIL" />
		<result property="mngDept" column="MNG_DEPT" />
		<result property="mngJobId" column="MNG_JOBID" />
		<result property="memberType" column="MEMBER_TYPE" />
		<result property="signUpAt" column="SIGNUP_AT" />
		<result property="updatedAt" column="UPDATED_AT" />
		<result property="loginOk" column="LOGIN_OK" />
		<result property="deletedYN" column="DELETED_YN" />
		<result property="deletedAt" column="DELETED_AT" />
		<result property="deletedReason" column="DELETED_REASON" />
	</resultMap><!-- resultMember end -->

	<!-- 이메일로 소셜로그인 -->
	<select id="selectSocialLogin" parameterType="string" resultMap="resultMember">
		select * from tb_member where email = #{ email } and login_ok = 'Y'
	</select>

	<!-- 소셜 회원가입용 쿼리 -->
	<select id="insertSocialMember" parameterType="Member">
		insert into tb_member
		values (#{uuid}, #{id}, #{pwd}, #{name}, #{phone}, #{email}, #{nickname},
		null, null, #{signtype}, #{marketingYN}, null, null, null, null, null,
		default, sysdate, sysdate, 'Y', null, null, null)
	</select>


	<!-- 로그인용 쿼리 -->
	<select id="selectLogin" parameterType="string" resultMap="resultMember">
		select * from tb_member where id = #{ id } and login_ok = 'Y'
	</select>
	
	<!-- 로그인 시 최근접속일 업데이트용 -->
	<update id="updateUpdatedAt" parameterType="Member">
		update tb_member
		set updated_at = sysdate
		where uuid = #{uuid} 
	</update>

	<!-- 일반사용자 회원가입용 쿼리 -->
	<select id="insertMember" parameterType="Member">
		insert into tb_member
		values (#{uuid}, #{id}, #{pwd}, #{name}, #{phone}, #{email}, #{nickname},
		null, null, default, #{marketingYN}, null, null, null, null, null,
		default, sysdate, sysdate, 'Y', null, null, null)
	</select>

	<!-- 전시관계자 회원가입용 쿼리 -->
	<select id="insertOrgMember" parameterType="Member">
		insert into tb_member
		values (#{uuid}, #{id}, #{pwd}, #{name}, #{phone}, null, null,
		null, null, default, #{marketingYN}, #{orgName}, null, #{orgEmail}, null,
		null, 'ORGANIZER', sysdate, sysdate, 'Y', null, null, null)
	</select>

	<!-- 회원 가입시 아이디 중복 검사용 쿼리 -->
	<select id="selectCheckId" parameterType="string" resultType="_int">
		select count(id) from tb_member where id = #{ id }
	</select>
	
	<!-- 내정보 보기용 -->
	<select id="selectMember" parameterType="string" resultMap="resultMember">
		select * from tb_member where uuid = #{uuid} and login_ok = 'Y'
	</select>
	
	<!-- 내정보 수정용 - USER -->
	<update id="updateMember" parameterType="Member">
		update tb_member
		set nickname = #{nickname}, pwd = #{pwd}, email = #{email}, phone = #{phone}, address = #{address}, marketing_yn = #{marketingYN}
		where uuid = #{uuid}
	</update>
	
	<!-- 내정보 수정용 - ORGANIZER -->
	<update id="updateOrgMember" parameterType="Member">
		update tb_member
		set pwd = #{pwd}, org_email = #{orgEmail}, org_tel = #{orgTel}, address = #{address}
			, name = #{name}, phone = #{phone}, email = #{email}, marketing_yn = #{marketingYN}
		where uuid = #{uuid}
	</update>
	
	<!-- 회원탈퇴용 - USER, ORGANIZER 모두 처리 -->
	<update id="updateDeleteMember" parameterType="Member">
		update tb_member
		set login_ok = 'N', deleted_yn = 'Y', deleted_at = sysdate, deleted_reason = #{deletedReason}
		where uuid = #{uuid}
	</update>
	
	
	<!-- 이메일로 아이디 찾기 - USER -->
	<select id="selectIdByEmail" parameterType="Member" resultMap="resultMember">
		select * from tb_member 
		where name = #{name} and email = #{email} and member_type = 'USER' and signtype = 'TIGGLE'
	</select>
	
	<!-- 전화번호로 아이디 찾기 - USER -->
	<select id="selectIdByPhone" parameterType="Member" resultMap="resultMember">
		select * from tb_member 
		where name = #{name} and phone = #{phone} and member_type = 'USER' and signtype = 'TIGGLE'
	</select>
	
	<!-- 기관 이메일로 아이디 찾기 - ORGANIZER -->
	<select id="selectOrgIdByEmail" parameterType="Member" resultMap="resultMember">
		select * from tb_member 
		where org_name = #{orgName} and org_email = #{orgEmail} and member_type = 'ORGANIZER' and signtype = 'TIGGLE'
	</select>
	
	<!-- 담당자 전화번호로 아이디 찾기 - ORGANIZER -->
	<select id="selectOrgIdByPhone" parameterType="Member" resultMap="resultMember">
		select * from tb_member 
		where org_name = #{orgName} and phone = #{phone} and member_type = 'ORGANIZER' and signtype = 'TIGGLE'
	</select>
	
	<!-- USER 찾기 (아이디, 이름, 이메일) -->
	<select id="selectFindUser" parameterType="Member" resultMap="resultMember">
		select * from tb_member 
		where id = #{id} and name = #{name} and email = #{email} and member_type = 'USER' and signtype = 'TIGGLE'
	</select>
	
	<!-- 임시비밀번호 설정 -->
	<update id="updateTempPwd">
		update tb_member
		set pwd = #{pwd}
		where uuid = #{uuid}
	</update>
	
	<!-- ORGANIZER 찾기 (아이디, 이름, 이메일) -->
	<select id="selectFindOrganizer" parameterType="Member" resultMap="resultMember">
		select * from tb_member 
		where id = #{id} and org_name = #{orgName} and org_email = #{orgEmail} and member_type = 'ORGANIZER'
	</select>
	
	
	
	
	<!-- 관리자용 ************************************************** -->
	<!-- 내정보 보기용 -->
	<select id="selectAllMember" parameterType="string" resultMap="resultMember">
		select * from tb_member where uuid = #{uuid}
	</select>
	
	<!-- 회원 정보 수정(관리자용) - USER, ORGANIZER 모두 처리 -->
	<update id="updateMemberInfo" parameterType="Member">
		update tb_member
		set pwd = #{pwd}, name = #{name}, phone = #{phone}, email = #{email}, nickname = #{nickname},
			address = #{address}, signtype = #{signtype}, marketing_yn = #{marketingYN},
			org_name = #{orgName}, org_tel = #{orgTel}, org_email = #{orgEmail}, mng_dept = #{mngDept},
			mng_jobid = #{mngJobId}, member_type = #{memberType}, signup_at = #{signUpAt}, updated_at = #{updatedAt},
			login_ok = #{loginOk}, deleted_yn = #{deletedYN}, deleted_at = #{deletedAt}, deleted_reason = #{deletedReason}
		where uuid = #{uuid}
	</update>
	 
	<!-- 한 페이지에 출력할 목록 조회용 : USER 인 회원만 조회 -->
	<select id="selectUserMembers" resultMap="resultMember" parameterType="Paging">
		select *
		from (select rownum rnum, UUID, ID, PWD, NAME, PHONE, EMAIL, NICKNAME, 
		        ADDRESS, SIGNTYPE, MARKETING_YN, ORG_NAME, ORG_TEL, ORG_EMAIL,
		        MNG_DEPT, MNG_JOBID, MEMBER_TYPE, SIGNUP_AT, UPDATED_AT,
		        LOGIN_OK, DELETED_YN, DELETED_AT, DELETED_REASON
		        from (select * from tb_member
		                where member_type = 'USER'
		                order by SIGNUP_AT desc))
		where rnum between #{ startRow } and #{ endRow }
	</select> 
	 
	<!-- 한 페이지에 출력할 목록 조회용 : ORGANIZER 인 회원만 조회 -->
	<select id="selectOrgMembers" resultMap="resultMember" parameterType="Paging">
		select *
		from (select rownum rnum, UUID, ID, PWD, NAME, PHONE, EMAIL, NICKNAME, 
		        ADDRESS, SIGNTYPE, MARKETING_YN, ORG_NAME, ORG_TEL, ORG_EMAIL,
		        MNG_DEPT, MNG_JOBID, MEMBER_TYPE, SIGNUP_AT, UPDATED_AT,
		        LOGIN_OK, DELETED_YN, DELETED_AT, DELETED_REASON
		        from (select * from tb_member
		                where member_type = 'ORGANIZER'
		                order by SIGNUP_AT desc))
		where rnum between #{ startRow } and #{ endRow }
	</select> 
	 
	<!-- 회원 전체 목록 카운트 조회용 : USER 인 회원만 조회 -->
	<select id="selectUserMembersCount" resultType="_int">
		select count(*) from tb_member where member_type = 'USER'
	</select>
	 
	<!-- 회원 전체 목록 카운트 조회용 : ORGANIZER 인 회원만 조회 -->
	<select id="selectOrgMembersCount" resultType="_int">
		select count(*) from tb_member where member_type = 'ORGANIZER'
	</select>
	
	
	<!-- USER 검색용(관리자용) -->
	<select id="selectSearchIdCount" resultType="_int" parameterType="string">
		select count(*) from tb_member 
		where member_type = 'USER'
		and id like '%' || #{ keyword } || '%'
	</select>
	<select id="selectSearchNameCount" resultType="_int" parameterType="string">
		select count(*) from tb_member 
		where member_type = 'USER'
		and name like '%' || #{ keyword } || '%'
	</select>
	<select id="selectSearchNicknameCount" resultType="_int" parameterType="string">
		select count(*) from tb_member 
		where member_type = 'USER'
		and nickname like '%' || #{ keyword } || '%'
	</select>
	<select id="selectSearchEmailCount" resultType="_int" parameterType="string">
		select count(*) from tb_member 
		where member_type = 'USER'
		and email like '%' || #{ keyword } || '%'
	</select>
	
	
	<select id="selectSearchId" parameterType="Search" resultMap="resultMember">
		select *
		from (select rownum rnum, UUID, ID, PWD, NAME, PHONE, EMAIL, NICKNAME, 
		        ADDRESS, SIGNTYPE, MARKETING_YN, ORG_NAME, ORG_TEL, ORG_EMAIL,
		        MNG_DEPT, MNG_JOBID, MEMBER_TYPE, SIGNUP_AT, UPDATED_AT,
		        LOGIN_OK, DELETED_YN, DELETED_AT, DELETED_REASON
	         from (select * from tb_member
		           where member_type = 'USER' and id like '%' || #{ keyword } || '%'
	        	  order by id asc))
		where rnum between #{ startRow } and #{ endRow }
	</select>
	<select id="selectSearchName" parameterType="Search" resultMap="resultMember">
		select *
		from (select rownum rnum, UUID, ID, PWD, NAME, PHONE, EMAIL, NICKNAME, 
		        ADDRESS, SIGNTYPE, MARKETING_YN, ORG_NAME, ORG_TEL, ORG_EMAIL,
		        MNG_DEPT, MNG_JOBID, MEMBER_TYPE, SIGNUP_AT, UPDATED_AT,
		        LOGIN_OK, DELETED_YN, DELETED_AT, DELETED_REASON
	         from (select * from tb_member
		           where member_type = 'USER' and name like '%' || #{ keyword } || '%'
	        	  order by name asc))
		where rnum between #{ startRow } and #{ endRow }
	</select>
	<select id="selectSearchNickname" parameterType="Search" resultMap="resultMember">
		select *
		from (select rownum rnum, UUID, ID, PWD, NAME, PHONE, EMAIL, NICKNAME, 
		        ADDRESS, SIGNTYPE, MARKETING_YN, ORG_NAME, ORG_TEL, ORG_EMAIL,
		        MNG_DEPT, MNG_JOBID, MEMBER_TYPE, SIGNUP_AT, UPDATED_AT,
		        LOGIN_OK, DELETED_YN, DELETED_AT, DELETED_REASON
	         from (select * from tb_member
		           where member_type = 'USER' and nickname like '%' || #{ keyword } || '%'
	        	  order by nickname asc))
		where rnum between #{ startRow } and #{ endRow }
	</select>
	<select id="selectSearchEmail" parameterType="Search" resultMap="resultMember">
		select *
		from (select rownum rnum, UUID, ID, PWD, NAME, PHONE, EMAIL, NICKNAME, 
		        ADDRESS, SIGNTYPE, MARKETING_YN, ORG_NAME, ORG_TEL, ORG_EMAIL,
		        MNG_DEPT, MNG_JOBID, MEMBER_TYPE, SIGNUP_AT, UPDATED_AT,
		        LOGIN_OK, DELETED_YN, DELETED_AT, DELETED_REASON
	         from (select * from tb_member
		           where member_type = 'USER' and email like '%' || #{ keyword } || '%'
	        	  order by email asc))
		where rnum between #{ startRow } and #{ endRow }
	</select>
	
	
	<!-- ORGANIZER 검색용(관리자용) -->
	<select id="selectOrgSearchIdCount" resultType="_int" parameterType="string">
		select count(*) from tb_member 
		where member_type = 'ORGANIZER'
		and id like '%' || #{ keyword } || '%'
	</select>
	<select id="selectOrgSearchOrgNameCount" resultType="_int" parameterType="string">
		select count(*) from tb_member 
		where member_type = 'ORGANIZER'
		and org_name like '%' || #{ keyword } || '%'
	</select>
	<select id="selectOrgSearchOrgEmailCount" resultType="_int" parameterType="string">
		select count(*) from tb_member 
		where member_type = 'ORGANIZER'
		and org_email like '%' || #{ keyword } || '%'
	</select>
	<select id="selectOrgSearchNameCount" resultType="_int" parameterType="string">
		select count(*) from tb_member 
		where member_type = 'ORGANIZER'
		and name like '%' || #{ keyword } || '%'
	</select>
	
	
	<select id="selectOrgSearchId" parameterType="Search" resultMap="resultMember">
		select *
		from (select rownum rnum, UUID, ID, PWD, NAME, PHONE, EMAIL, NICKNAME, 
		        ADDRESS, SIGNTYPE, MARKETING_YN, ORG_NAME, ORG_TEL, ORG_EMAIL,
		        MNG_DEPT, MNG_JOBID, MEMBER_TYPE, SIGNUP_AT, UPDATED_AT,
		        LOGIN_OK, DELETED_YN, DELETED_AT, DELETED_REASON
	         from (select * from tb_member
		           where member_type = 'ORGANIZER' and id like '%' || #{ keyword } || '%'
	        	  order by id asc))
		where rnum between #{ startRow } and #{ endRow }
	</select>
	<select id="selectOrgSearchOrgName" parameterType="Search" resultMap="resultMember">
		select *
		from (select rownum rnum, UUID, ID, PWD, NAME, PHONE, EMAIL, NICKNAME, 
		        ADDRESS, SIGNTYPE, MARKETING_YN, ORG_NAME, ORG_TEL, ORG_EMAIL,
		        MNG_DEPT, MNG_JOBID, MEMBER_TYPE, SIGNUP_AT, UPDATED_AT,
		        LOGIN_OK, DELETED_YN, DELETED_AT, DELETED_REASON
	         from (select * from tb_member
		           where member_type = 'ORGANIZER' and org_name like '%' || #{ keyword } || '%'
	        	  order by name asc))
		where rnum between #{ startRow } and #{ endRow }
	</select>
	<select id="selectOrgSearchOrgEmail" parameterType="Search" resultMap="resultMember">
		select *
		from (select rownum rnum, UUID, ID, PWD, NAME, PHONE, EMAIL, NICKNAME, 
		        ADDRESS, SIGNTYPE, MARKETING_YN, ORG_NAME, ORG_TEL, ORG_EMAIL,
		        MNG_DEPT, MNG_JOBID, MEMBER_TYPE, SIGNUP_AT, UPDATED_AT,
		        LOGIN_OK, DELETED_YN, DELETED_AT, DELETED_REASON
	         from (select * from tb_member
		           where member_type = 'ORGANIZER' and org_email like '%' || #{ keyword } || '%'
	        	  order by nickname asc))
		where rnum between #{ startRow } and #{ endRow }
	</select>
	<select id="selectOrgSearchName" parameterType="Search" resultMap="resultMember">
		select *
		from (select rownum rnum, UUID, ID, PWD, NAME, PHONE, EMAIL, NICKNAME, 
		        ADDRESS, SIGNTYPE, MARKETING_YN, ORG_NAME, ORG_TEL, ORG_EMAIL,
		        MNG_DEPT, MNG_JOBID, MEMBER_TYPE, SIGNUP_AT, UPDATED_AT,
		        LOGIN_OK, DELETED_YN, DELETED_AT, DELETED_REASON
	         from (select * from tb_member
		           where member_type = 'ORGANIZER' and name like '%' || #{ keyword } || '%'
	        	  order by email asc))
		where rnum between #{ startRow } and #{ endRow }
	</select>
	
	
	
	
	
	
	
	<!-- 관리자페이지 내보내기용 -->
	<!-- <select id="selectAdmin" parameterType="string" resultMap="resultMember">
		select * from tb_member where uuid = #{uuid} and member_type = 'ADMIN'
	</select> -->
	<!-- 회원 전체 목록 카운트 조회용 : USER 인 회원만 조회(삭제예정) -->
	<!-- <select id="selectListCount" resultType="_int">
		select count(*) from tb_member where member_type != 'ADMIN'
	</select> -->

	
</mapper>
